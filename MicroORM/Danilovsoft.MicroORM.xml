<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DanilovSoft.MicroORM</name>
    </assembly>
    <members>
        <member name="M:DanilovSoft.MicroORM.IAsyncSqlReader.Execute(System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.IAsyncSqlReader.Table(System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.IAsyncSqlReader.Scalar(System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.IAsyncSqlReader.ScalarArray(System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.IAsyncSqlReader.ScalarList(System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.IAsyncSqlReader.ScalarArray``1(System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.IAsyncSqlReader.ScalarList``1(System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.IAsyncSqlReader.Scalar``1(System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.IAsyncSqlReader.ScalarOrDefault``1(System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.IAsyncSqlReader.Single``1(System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.IAsyncSqlReader.Single``1(``0,System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.IAsyncSqlReader.SingleOrDefault``1(System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.IAsyncSqlReader.SingleOrDefault``1(``0,System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.IAsyncSqlReader.List``1(System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.IAsyncSqlReader.List``1(``0,System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.IAsyncSqlReader.Array``1(System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.IAsyncSqlReader.Array``1(``0,System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.IAsyncSqlReader.Collection``2(System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="T:DanilovSoft.MicroORM.ObjectMapping.ConstructorArgument">
            <summary>
            Хранится в словаре поэтому извлекается быстрее как класс, а не структура.
            </summary>
        </member>
        <member name="T:DanilovSoft.MicroORM.ObjectMapping.ContractActivator">
            <summary>
            Создание данного экземпляра должно выполняться синхронизированно.
            </summary>
        </member>
        <member name="F:DanilovSoft.MicroORM.ObjectMapping.ContractActivator._emptyCtorActivator">
            <summary>
            Создаёт объект через пустой конструктор.
            </summary>
        </member>
        <member name="F:DanilovSoft.MicroORM.ObjectMapping.ContractActivator._anonymousCtorActivator">
            <summary>
            Создаёт объект через параметризованный конструктор.
            </summary>
        </member>
        <member name="F:DanilovSoft.MicroORM.ObjectMapping.ContractActivator.ConstructorArguments">
            <summary>
            Для маппинга параметров конструктора по именам.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.ContractActivator.GetIsReadonlyStruct(System.Type)">
            <returns><see langword="true"/> если <paramref name="type"/> является <see langword="readonly struct"/></returns>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.DynamicReflectionDelegateFactory.CreateDefaultConstructor``1(System.Type)">
            <summary>
            Находит пустой конструктор.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.ILGeneratorExtensions.PushInstance(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Ldarg_0.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.ILGeneratorExtensions.Emit_Ldarg(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Загружает аргумент с индексом <paramref name="argIndex"/> в стек вычислений.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.ILGeneratorExtensions.Emit_Ldc_I4(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Помещает целочисленное значение <paramref name="n"/> в стек вычислений как <see langword="int32"/>.
            </summary>
        </member>
        <member name="T:DanilovSoft.MicroORM.ObjectMapping.OrmLazyProperty">
            <summary>
            Хранит мета информацию о свойстве или поле.
            Хранится в словаре поэтому извлекается быстрее как класс, а не как структура.
            </summary>
        </member>
        <member name="T:DanilovSoft.MicroORM.ObjectMapping.OrmProperty">
            <summary>
            Хранится в словаре поэтому извлекается быстрее как класс, а не как структура.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.OrmProperty.Convert(System.Object,System.Type,System.String)">
            <param name="sqlColumnName">Используется только для ошибок.</param>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.OrmProperty.ConvertAndSetValue(System.Object,System.Object,System.Type,System.String)">
            <param name="sqlColumnName">Используется только для ошибок.</param>
        </member>
        <member name="F:DanilovSoft.MicroORM.ObjectMapping.StaticCache.TypesProperties">
            <summary>
            Хранит свойства и поля каждого типа.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.StaticCache.FromLazyActivator(System.Type)">
            <summary>
            Инициализирует контракт для типа <paramref name="type"/> из ленивой фабрики.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.StaticCache.FromLazyAnonimousActivator(System.Type)">
            <summary>
            Инициализирует контракт для типа <paramref name="type"/> из ленивой фабрики.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.TypeContract.TryGetOrmPropertyFromLazy(System.String,DanilovSoft.MicroORM.ObjectMapping.OrmProperty@)">
            <summary>
            Инициирует ленивое свойство при первом обращении.
            Этот метод потокобезопасен.
            </summary>
        </member>
        <member name="T:DanilovSoft.MicroORM.CancelCommandRequest">
            <summary>
            If there is nothing to cancel, nothing happens. 
            However, if there is a command in process, and the attempt to cancel fails, no exception is generated.
            
            Не спасает от не явного разъединения!
            </summary>
        </member>
        <member name="T:DanilovSoft.MicroORM.CloseConnection">
            <summary>
            Аварийный контроль соединения.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.CloseConnection.Dispose">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="T:DanilovSoft.MicroORM.CommandReaderCloseConnection">
            <summary>
            Закрывает соединение при Dispose.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ExtensionMethods.LoadAsync(System.Data.DataTable,System.Data.Common.DbDataReader,System.Threading.CancellationToken)">
            <summary>
            Загружает данные в DataTable.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ExtensionMethods.LoadData(System.Data.DataTable,System.Data.Common.DbDataReader)">
            <summary>
            Загружает данные в DataTable.
            </summary>
        </member>
        <member name="T:DanilovSoft.MicroORM.MultiSqlReader">
            <summary>
            Не закрывает соединение.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DanilovSoft.MicroORM.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:DanilovSoft.MicroORM.NonNullableConvention">
            <summary>
                A base type for conventions that configure model aspects based on whether the member type
                is a non-nullable reference type.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.NonNullableConvention.IsNonNullableReferenceType2(System.Reflection.MemberInfo)">
            <summary>
                Returns a value indicating whether the member type is a non-nullable reference type.
            </summary>
            <param name="memberInfo"> The member info. </param>
            <returns> <see langword="true" /> if the member type is a non-nullable reference type. </returns>
        </member>
        <member name="P:DanilovSoft.MicroORM.SqlORM.DefaultQueryTimeoutSec">
            <remarks>Default value is 30 seconds.</remarks>
        </member>
        <member name="P:DanilovSoft.MicroORM.SqlORM.CloseConnectionPenaltySec">
            <summary>
            -1 means infinite.
            </summary>
            <remarks>Default value is 30 seconds.</remarks>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlQuery.Parameters(System.Object[])">
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.NullIfDBNull(System.Object@)">
            <summary>
            Если <paramref name="dbValue"/> является DBNull то заменяется на Null.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTransaction.Sql(System.String,System.Object[])">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTransaction.Commit">
            <summary>
            Commits the database transaction.
            Try/Catch exception handling should always be used when committing or rolling back a SqlTransaction.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTransaction.Rollback">
            <summary>
            Rolls back a transaction from a pending state.
            Try/Catch exception handling should always be used when committing or rolling back a SqlTransaction.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTypeConverter.ChangeType``1(System.Object,System.Type,System.String)">
            <param name="sqlColumnName">Используется только для ошибок.</param>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTypeConverter.ChangeType(System.Object,System.Type,System.Type,System.String)">
            <param name="sqlColumnName">Используется только для ошибок.</param>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTypeConverter.ChangeType(System.Object,System.Type,System.String)">
            <param name="sqlColumnName">Используется только для ошибок.</param>
        </member>
        <member name="T:System.Threading.DelayedAction`1">
            <summary>
            Планирует отложенный запуск задачи. Открытые члены класса являются потокобезопасными.
            </summary>
        </member>
        <member name="F:System.Threading.DelayedAction`1._state">
            <summary>
            -1 — Не запланирован.
            0 — Запланирован.
            1 — Сработал.
            2 — Отменен.
            </summary>
        </member>
        <member name="M:System.Threading.DelayedAction`1.OnTimer">
            <remarks>Может сработать одновременно с TryCancel.</remarks>
        </member>
        <member name="M:System.Threading.DelayedAction`1.TryStart">
            <remarks>Может сработать одновременно с TryCancel.</remarks>
        </member>
        <member name="M:System.Threading.DelayedAction`1.TryCancel">
            <summary>
            Пытается отменить запланированную задачу.
            </summary>
            <remarks>Может сработать одновременно с TryStart.</remarks>
            <returns>True если удалось отменить запланированную задачу.</returns>
        </member>
    </members>
</doc>
