<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DanilovSoft.MicroORM</name>
    </assembly>
    <members>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.Execute">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.Table">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.Scalar">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.Scalar``1">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarArray">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarList">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarArray``1">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarList``1">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarOrDefault``1">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.Single``1">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.Single``1(``0)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.SingleOrDefault``1">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.SingleOrDefault``1(``0)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ToList``1">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ToList``1(``0)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ToArray``1">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ToArray``1(``0)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ToCollection``2">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ExecuteAsync">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ExecuteAsync(System.Threading.CancellationToken)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.TableAsync">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.TableAsync(System.Threading.CancellationToken)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarAsync">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarAsync(System.Threading.CancellationToken)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarArrayAsync">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarArrayAsync(System.Threading.CancellationToken)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarListAsync">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarListAsync(System.Threading.CancellationToken)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarArrayAsync``1">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarArrayAsync``1(System.Threading.CancellationToken)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarListAsync``1">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarListAsync``1(System.Threading.CancellationToken)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarAsync``1">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarAsync``1(System.Threading.CancellationToken)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarOrDefaultAsync``1">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ScalarOrDefaultAsync``1(System.Threading.CancellationToken)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.SingleAsync``1">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.SingleAsync``1(System.Threading.CancellationToken)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.SingleAsync``1(``0)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.SingleAsync``1(``0,System.Threading.CancellationToken)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.SingleOrDefaultAsync``1">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.SingleOrDefaultAsync``1(System.Threading.CancellationToken)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.SingleOrDefaultAsync``1(``0)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.SingleOrDefaultAsync``1(``0,System.Threading.CancellationToken)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ToListAsync``1">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ToListAsync``1(System.Threading.CancellationToken)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ToListAsync``1(``0)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ToListAsync``1(``0,System.Threading.CancellationToken)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ToArrayAsync``1">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ToArrayAsync``1(System.Threading.CancellationToken)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ToArrayAsync``1(``0)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ToArrayAsync``1(``0,System.Threading.CancellationToken)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ToCollectionAsync``2">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ISqlReader.ToCollectionAsync``2(System.Threading.CancellationToken)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="T:DanilovSoft.MicroORM.ObjectMapping.ConstructorArgument">
            <summary>
            Хранится в словаре поэтому извлекается быстрее как класс, а не структура.
            </summary>
        </member>
        <member name="T:DanilovSoft.MicroORM.ObjectMapping.ContractActivator">
            <summary>
            Создание данного экземпляра должно выполняться синхронизированно.
            </summary>
        </member>
        <member name="F:DanilovSoft.MicroORM.ObjectMapping.ContractActivator._emptyCtorActivator">
            <summary>
            Создаёт объект через пустой конструктор.
            </summary>
        </member>
        <member name="F:DanilovSoft.MicroORM.ObjectMapping.ContractActivator._ctorActivator">
            <summary>
            Создаёт объект через параметризованный конструктор.
            </summary>
        </member>
        <member name="F:DanilovSoft.MicroORM.ObjectMapping.ContractActivator.ConstructorArguments">
            <summary>
            Для маппинга параметров конструктора по именам.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.DynamicReflectionDelegateFactory.CreateDefaultConstructor``1(System.Type)">
            <summary>
            Находит пустой конструктор.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.ILGeneratorExtensions.PushInstance(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Ldarg_0.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.ILGeneratorExtensions.Emit_Ldarg(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Загружает аргумент с индексом <paramref name="argIndex"/> в стек вычислений.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.ILGeneratorExtensions.Emit_Ldc_I4(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Помещает целочисленное значение <paramref name="n"/> в стек вычислений как <see langword="int32"/>.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.ObjectMapper`1.ReadSqlRawValue(System.Data.Common.DbDataReader,System.Int32,System.Type@)">
            <returns>Значение которое может быть <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="F:DanilovSoft.MicroORM.ObjectMapping.ObjectMapper`1.PropertyToSet.ClrValue">
            <summary>
            Не может быть <see cref="T:System.DBNull"/>.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.ObjectMapper`1.AccumulateSqlValueForProperty(System.Data.Common.DbDataReader,System.Int32,System.String,DanilovSoft.MicroORM.ObjectMapping.OrmProperty,System.Collections.Generic.List{DanilovSoft.MicroORM.ObjectMapping.ObjectMapper{`0}.PropertyToSet}@)">
            <param name="sqlColumnName">Используется только для ошибок.</param>
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.ObjectMapper`1.ValidateAllParametersMapped(System.Span{System.Boolean},System.Collections.Generic.IEnumerable{DanilovSoft.MicroORM.ObjectMapping.ConstructorArgument})">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.ObjectMapper`1.AccumulateCtorParameter(System.Data.Common.DbDataReader,System.Int32,System.String,DanilovSoft.MicroORM.ObjectMapping.ConstructorArgument)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <returns>CLR значение.</returns>
        </member>
        <member name="T:DanilovSoft.MicroORM.ObjectMapping.OrmLazyProperty">
            <summary>
            Хранит мета информацию о свойстве или поле.
            Хранится в словаре поэтому извлекается быстрее как класс, а не как структура.
            </summary>
        </member>
        <member name="T:DanilovSoft.MicroORM.ObjectMapping.OrmProperty">
            <summary>
            Хранится в словаре поэтому извлекается быстрее как класс, а не как структура.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.OrmProperty.ConvertSqlToClrValue(System.Object,System.Type,System.String)">
            <param name="sqlColumnName">Используется только для ошибок.</param>
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <returns>CLR значение.</returns>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.OrmProperty.ConvertAndSetValue(System.Object,System.Object,System.Type,System.String)">
            <param name="sqlRawValue">Может быть <see cref="T:System.DBNull"/>.</param>
            <param name="sqlColumnName">Используется только для ошибок.</param>
        </member>
        <member name="F:DanilovSoft.MicroORM.ObjectMapping.StaticCache.TypesProperties">
            <summary>
            Хранит свойства и поля каждого типа.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.StaticCache.FromLazyActivator(System.Type)">
            <summary>
            Инициализирует контракт для типа <paramref name="type"/> из ленивой фабрики.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.StaticCache.FromLazyAnonimousActivator(System.Type)">
            <summary>
            Инициализирует контракт для типа <paramref name="type"/> из ленивой фабрики.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ObjectMapping.TypeContract.TryGetOrmProperty(System.String,DanilovSoft.MicroORM.ObjectMapping.OrmProperty@)">
            <summary>
            Инициирует ленивое свойство при первом обращении.
            Этот метод потокобезопасен.
            </summary>
        </member>
        <member name="T:DanilovSoft.MicroORM.CancelCommandRequest">
            <summary>
            If there is nothing to cancel, nothing happens. 
            However, if there is a command in process, and the attempt to cancel fails, no exception is generated.
            
            Не спасает от не явного разъединения!
            </summary>
        </member>
        <member name="T:DanilovSoft.MicroORM.CloseConnection">
            <summary>
            Аварийный контроль соединения.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.CloseConnection.Dispose">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="P:DanilovSoft.MicroORM.CommandReader.Connection">
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="P:DanilovSoft.MicroORM.CommandReader.Command">
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.CommandReader.GetReader">
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.CommandReader.GetReaderAsync(System.Threading.CancellationToken)">
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.CommandReader.DisposeConnection">
            <summary>
            Диспозит DbCommand и соединение.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.CommandReader.CheckDisposed">
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="T:DanilovSoft.MicroORM.CommandReaderCloseConnection">
            <summary>
            Закрывает соединение при Dispose.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ExtensionMethods.LoadAsync(System.Data.DataTable,System.Data.Common.DbDataReader,System.Threading.CancellationToken)">
            <summary>
            Загружает данные в DataTable.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.ExtensionMethods.LoadData(System.Data.DataTable,System.Data.Common.DbDataReader)">
            <summary>
            Загружает данные в DataTable.
            </summary>
        </member>
        <member name="T:DanilovSoft.MicroORM.MultiSqlReader">
            <summary>
            Не закрывает соединение.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.MultiSqlReader.ExecuteReader">
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.MultiSqlReader.ExecuteReaderAsync(System.Threading.CancellationToken)">
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.MultiSqlReader.CheckDisposed">
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="T:DanilovSoft.MicroORM.NonNullableConvention">
            <summary>
                A base type for conventions that configure model aspects based on whether the member type
                is a non-nullable reference type.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.NonNullableConvention.IsNonNullableReferenceType2(System.Reflection.MemberInfo)">
            <summary>
                Returns a value indicating whether the member type is a non-nullable reference type.
            </summary>
            <param name="memberInfo"> The member info. </param>
            <returns> <see langword="true" /> if the member type is a non-nullable reference type. </returns>
        </member>
        <member name="M:DanilovSoft.MicroORM.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DanilovSoft.MicroORM.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:DanilovSoft.MicroORM.SqlORM.DefaultQueryTimeoutSec">
            <remarks>Default value is 30 seconds.</remarks>
        </member>
        <member name="P:DanilovSoft.MicroORM.SqlORM.CloseConnectionPenaltySec">
            <summary>
            -1 means infinite.
            </summary>
            <remarks>Default value is 30 seconds.</remarks>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlQuery.GetConnection">
            <summary>
            Запрашивает соединение через фабрику и делает Open.
            </summary>
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlQuery.Parameters(System.Object[])">
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.NullIfDBNull(System.Object)">
            <summary>
            Если <paramref name="sqlRawValue"/> является DBNull то заменяется на Null.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.Execute">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.Table">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.Scalar">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.Scalar``1">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarArray">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarList">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarArray``1">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarList``1">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarOrDefault``1">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.Single``1">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.Single``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.SingleOrDefault``1">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.SingleOrDefault``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.AsAnonymousAsync``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ToList``1">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ToList``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ToArray``1">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ToArray``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ToCollection``2">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ToCollectionAsync``2">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ToCollectionAsync``2(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.TableAsync">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.TableAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarAsync">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarAsync``1">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarAsync``1(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarArrayAsync">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarListAsync">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarArrayAsync``1">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarListAsync``1">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarArrayAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarArrayAsync``1(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarListAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarListAsync``1(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarOrDefaultAsync``1">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ScalarOrDefaultAsync``1(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ToListAsync``1">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ToListAsync``1(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ToListAsync``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ToListAsync``1(``0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ToArrayAsync``1">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ToArrayAsync``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ToArrayAsync``1(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ToArrayAsync``1(``0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.SingleAsync``1">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.SingleAsync``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.SingleAsync``1(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.SingleAsync``1(``0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.SingleOrDefaultAsync``1">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.SingleOrDefaultAsync``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.SingleOrDefaultAsync``1(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.SingleOrDefaultAsync``1(``0,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ExecuteAsync">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.ExecuteAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlReader.WrapperAsync``2(System.Func{System.Data.Common.DbDataReader,``1,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},``1,System.Threading.CancellationToken)">
            <param name="selector">Содержит перегруженный токен отмены для поддержания аварийной отмены.</param>
            <param name="cancellationToken">Пользовательский токен отмены.</param>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTransaction.OpenTransaction">
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTransaction.OpenTransactionAsync(System.Threading.CancellationToken)">
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTransaction.OpenTransactionAsync">
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTransaction.Sql(System.String,System.Object[])">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTransaction.SqlInterpolated(System.FormattableString,System.Char)">
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTransaction.Commit">
            <summary>
            Commits the database transaction.
            Try/Catch exception handling should always be used when committing or rolling back a SqlTransaction.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTransaction.Rollback">
            <summary>
            Rolls back a transaction from a pending state.
            Try/Catch exception handling should always be used when committing or rolling back a SqlTransaction.
            </summary>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTransaction.CheckDisposed">
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTypeConverter.ConvertSqlToCtorValue(System.Object,System.Type,System.String,System.Boolean,System.String,System.Type)">
            <param name="sqlRawValue">Значение которое может быть <see cref="T:System.DBNull"/>.</param>
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTypeConverter.ConvertRawSqlToClrType``1(System.Object,System.Type,System.String)">
            <param name="sqlRawValue">Значение которое может быть <see cref="T:System.DBNull"/>.</param>
            <param name="sqlColumnName">Используется только для ошибок.</param>
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTypeConverter.ConvertRawSqlToClrType(System.Object,System.Type,System.String,System.Type)">
            <param name="sqlRawValue">Значение которое может быть <see cref="T:System.DBNull"/>.</param>
            <param name="sqlColumnName">Используется только для ошибок.</param>
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTypeConverter.ConvertSqlToClrType(System.Object,System.Type,System.String,System.Type)">
            <param name="sqlValue">Значение которое не может быть <see cref="T:System.DBNull"/>.</param>
            <param name="sqlColumnName">Используется только для ошибок.</param>
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTypeConverter.ChangeType(System.Object,System.Type,System.String)">
            <param name="sqlColumnName">Используется только для ошибок.</param>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTypeConverter.ConvertNullableRawSqlType(System.Object,System.String,System.Boolean,System.String,System.String)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <returns><paramref name="sqlRawValue"/> который может иметь Null вместо DBNull.</returns>
        </member>
        <member name="M:DanilovSoft.MicroORM.SqlTypeConverter.ConvertNullableRawSqlType(System.Object)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
            <returns><paramref name="sqlRawValue"/> который может иметь Null вместо DBNull.</returns>
        </member>
        <member name="M:DanilovSoft.MicroORM.ThrowHelper.ThrowCantSetNull(System.String,System.String,System.String)">
            <exception cref="T:DanilovSoft.MicroORM.MicroOrmException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ThrowHelper.ThrowObjectDisposed(System.String)">
            <exception cref="M:DanilovSoft.MicroORM.ThrowHelper.ThrowObjectDisposed(System.String)"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ThrowHelper.ThrowObjectDisposed``1">
            <exception cref="M:DanilovSoft.MicroORM.ThrowHelper.ThrowObjectDisposed(System.String)"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ThrowHelper.AssertNotNull``1(``0,System.String)">
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:DanilovSoft.MicroORM.ThrowHelper.ThrowArgumentNull(System.String)">
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:System.Threading.DelayedAction`1">
            <summary>
            Планирует отложенный запуск задачи. Открытые члены класса являются потокобезопасными.
            </summary>
        </member>
        <member name="F:System.Threading.DelayedAction`1._state">
            <summary>
            -1 — Не запланирован.
            0 — Запланирован.
            1 — Сработал.
            2 — Отменен.
            </summary>
        </member>
        <member name="M:System.Threading.DelayedAction`1.OnTimer">
            <remarks>Может сработать одновременно с TryCancel.</remarks>
        </member>
        <member name="M:System.Threading.DelayedAction`1.TryStart">
            <remarks>Может сработать одновременно с TryCancel.</remarks>
        </member>
        <member name="M:System.Threading.DelayedAction`1.TryCancel">
            <summary>
            Пытается отменить запланированную задачу.
            </summary>
            <remarks>Может сработать одновременно с TryStart.</remarks>
            <returns>True если удалось отменить запланированную задачу.</returns>
        </member>
    </members>
</doc>
